/** * LAB139 com.alsfox.lab139.utils 2015 */package com.wwxd.utilsimport java.io.Fileimport java.io.FileInputStreamimport java.nio.charset.StandardCharsetsimport java.security.MessageDigest/** * MD5加密工具类 */object MD5Util {    /**     * 默认的密码字符串组合，用来将字节转换成 16 进制表示的字符,apache校验下载的文件的正确性用的就是默认的这个组合     */    private val hexDigits =        charArrayOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f')    private val hexDigitsBig =        charArrayOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')    /**     * 生成文件的md5校验值     *     * @param file     * @return     * @throws IOException     */    fun getFileMD5String(file: File): String {        val fis = FileInputStream(file)        val buffer = ByteArray(1024)        var numRead: Int        val messagedigest = MessageDigest.getInstance("MD5")        while (fis.read(buffer).also { numRead = it } > 0) {            messagedigest.update(buffer, 0, numRead)        }        fis.close()        val bytes = messagedigest.digest()        return bufferToHex(bytes, false)    }    /**     * 小写md5加密     *     * @param sourceStr     * @return     */    fun md5(sourceStr: String): String {        val strss = String(sourceStr.toByteArray(), StandardCharsets.UTF_8)        val source = strss.toByteArray()        val md = MessageDigest.getInstance("MD5")        md.update(source)        val tmp = md.digest()        return bufferToHex(tmp, false)    }    fun md5_16(sourceStr: String): String {        val md5 = md5(sourceStr)        return md5.substring(8, 24)    }    fun MD5(str: String): String {        val strss = String(str.toByteArray(), StandardCharsets.UTF_8)        val source = strss.toByteArray()        // 获得MD5摘要算法的 MessageDigest 对象        val mdInst = MessageDigest.getInstance("MD5")        // 使用指定的字节更新摘要        mdInst.update(source)        // 获得密文        val md = mdInst.digest()        return bufferToHex(md, true)    }    fun MD5_16(sourceStr: String): String {        val md5 = MD5(sourceStr)        return md5.substring(8, 24)    }    private fun bufferToHex(bytes: ByteArray, isBig: Boolean): String {        val stringbuffer = StringBuffer(2 * bytes.size)        val k = bytes.size        for (l in 0 until k) {            appendHexPair(bytes[l], stringbuffer, isBig)        }        return stringbuffer.toString()    }    private fun appendHexPair(bt: Byte, stringbuffer: StringBuffer, isBig: Boolean) {        val c0: Char        val c1: Char        if (isBig) {            // 取字节中高 4 位的数字转换, >>>            c0 = hexDigitsBig.get(bt.toInt() and 0xf0 shr 4)            // 为逻辑右移，将符号位一起右移,此处未发现两种符号有何不同            c1 = hexDigitsBig.get(bt.toInt() and 0xf) // 取字节中低 4 位的数字转换        } else {            // 取字节中高 4 位的数字转换, >>>            c0 = hexDigits.get(bt.toInt() and 0xf0 shr 4)            // 为逻辑右移，将符号位一起右移,此处未发现两种符号有何不同            c1 = hexDigits.get(bt.toInt() and 0xf) // 取字节中低 4 位的数字转换        }        stringbuffer.append(c0)        stringbuffer.append(c1)    }}